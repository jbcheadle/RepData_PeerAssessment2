install.packages("dplyr")
library(dplyr)
library(plyr)
x <- c(1,2,3,5,6,7,7,889,220)
stuff <- ifelse(x>4,TRUE,FALSE)
stuff
table(x,stuff)
table(stuff,x>4)
x[stuff]
?cut
library(Hmisc)
yesno <- sample(c("yes","no"),size=10, replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)
library(reshape2)
head(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
mtcars$carname<-rownames(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
head(carMelt)
tail(carMelt)
cylData <- dcast(carMelt, cyl ~ variable)
?dcast
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean,std)
cylData <- dcast(carMelt, cyl ~ variable,mean,cos())
cylData <- dcast(carMelt, cyl ~ variable,mean,cos)
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
?split
library(data.table)
?split
library("crayon", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:crayon", unload=TRUE)
?ddply
?summarize
chicago <- readRDS("chicago.rds")
swirl()
library(swirl)
swirl(0)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000
)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
install.packages("curl")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
?summarize
summarize(by_package, mean(size))
?n
?n_distinct
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique()))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
chain1()
chain1
cran %>%
select(ip_id, country, package, size) %>%
print
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
?
c
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain2.R')
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain4.R')
submit()
library("dplyr", lib.loc="C:/Program Files/R/R-3.3.2/library")
library(swirl)
swirl(0)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
separate(0)
separate()
?separate
separate(res, sex_class, into = c("sex","class"))
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script1.R')
submit()
students3
?gather
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
refresh()
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
students3$class1:class6
students3$class1:class5
students3$class1
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
select(students3,class1:class5)
students3%>%select(class1:class5)
students3%>%select(class1:class5)%>%gather(class,grade,na.rm=TRUE)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
submit()
skip()
swirl()
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
?gather
?filter
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
skip()
?spread(0)
?spread
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
library(readr)
parse_number("class5")
?mutate
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
submit()
students4
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script5.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script6.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(passed, status="failed")
failed <- mutate(failed, status="failed")
bind_rows(passed,failed)
sat
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script8.R')
submit(0)
submit()
?group_by
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script9.R')
submit()
?heatmap.2
?heatmap
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(RColorBrewer)
?heatmap.2
knit_with_parameters('C:/Program Files/R/Coursera/Data Science R/RepData_PeerAssessment1/PA1_template.Rmd')
setwd("C:/Program Files/R/Coursera/Data Science R/RepData_PeerAsessment2")
?bzip2
install.packages("bzip2")
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!(file.exists("StormData.csv.bz2"))) {
download.file(url = fileURL, destfile = "./StormData.csv.bz2")
stormdata <- read.csv("StormData.csv.bz2")
}
## Downloading Raw Data
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!(file.exists("StormData.csv.bz2"))) {
download.file(url = fileURL, destfile = "./StormData.csv.bz2")
stormdata <- read.csv("StormData.csv.bz2")
## Pre-processing data
}
names(stormdata)
class(stormdata$EVTYPE)
levels(stormdata$EVTYPE)
head(stormdata)
levels(stormdata$PROPDMGEXP)
unique(stormdata$CROPDMGEXP)
unique(stormdata$PROPDMGEXP)
sum(stormdata$INJURIES)
sum(stormdata$FATALITIES)
levels(stormdata$F)
class(stormdata$F)
unique(stormdata$F)
unique(stormdata$MAG)
class(stormdata$PROPDMG)
class(stormdata$CROPDMG)
explist <- unique(c(unique(stormdata$CROPDMGEXP), unique(stormdata$PROPDMGEXP)))
explist <- as.char(unique(c(unique(stormdata$CROPDMGEXP), unique(stormdata$PROPDMGEXP))))
explist <- as.character(unique(c(unique(stormdata$CROPDMGEXP), unique(stormdata$PROPDMGEXP))))
explist
c(unique(stormdata$CROPDMGEXP), unique(stormdata$PROPDMGEXP))
stormdata$CROPDMG
unique(stormdata$CROPDMG)
unique(stormdata$CROPDMGEXP)
c(unique(stormdata$CROPDMGEXP), unique(stormdata$PROPDMGEXP))
cropdmgexp <- unique(stormdata$CROPDMGEXP)
cropdmgexp
class(cropdmgexp)
unclass(cropdmgexp)
lables(cropdmgexp)
labels(cropdmgexp)
levels(cropdmgexp)
class(levels(cropdmgexp))
explist <- unique(c(levels(unique(stormdata$CROPDMGEXP)), levels(unique(stormdata$PROPDMGEXP))))
explist
order(explist)
explist
for (i in explist) {i}
for (i in explist) {print(i)}
stormdata$CROPDMG %in% c("B","b","K","k","M","m","H","h")
sum(stormdata$CROPDMG %in% c("B","b","K","k","M","m","H","h"))
sum(stormdata$CROPDMGEXP %in% c("B","b","K","k","M","m","H","h"))
sum(stormdata$PROPDMGEXP %in% c("B","b","K","k","M","m","H","h"))
sum(stormdata$PROPDMGEXP == "B")
sum(stormdata$PROPDMGEXP == "b")
sum(stormdata$CROPDMGEXP == "b")
sum(stormdata$CROPDMGEXP == "K")
sum(stormdata$CROPDMGEXP == "k")
sum(stormdata$CROPDMGEXP == "M")
sum(stormdata$CROPDMGEXP == "m")
sum(stormdata$CROPDMGEXP == "H")
sum(stormdata$CROPDMGEXP == "h")
sum(stormdata$PROPDMGEXP == "h")
sum(stormdata$PROPDMGEXP == "H")
sum(stormdata$PROPDMGEXP == "")
injury_agg <- aggregate(stormdata$INJURIES, by=list(EventType=stormdata$EVTYPE),
FUN=sum, na.rm=TRUE)
head(injury_agg)
injury_agg <- aggregate(Injuries = stormdata$INJURIES, by=list(EventType=stormdata$EVTYPE),
FUN=sum, na.rm=TRUE)
tail(injury_agg)
sort(injury_agg)
fatality_agg <- aggregate(stormdata$FATALITIES, by=list(EventType=stormdata$EVTYPE),
FUN=sum, na.rm=TRUE)
head(fatality_agg)
?sort
sort(fatality_agg, decreasing=TRUE)
sort(fatality_agg$x, decreasing=TRUE)
?order
order(fatality_agg$x, decreasing=TRUE)
fatality_agg2 <- fatality_agg[order(fatality_agg$x, decreasing=TRUE),]
head(fatality_agg2)
injury_agg <- injury_agg[order(injury_agg$x, decreasing=TRUE),]
head(injury_agg, n=10)
head(fatality_agg, n=10)
fatality_agg <- fatality_agg[order(fatality_agg$x, decreasing=TRUE),]
head(fatality_agg)
head(fatality_agg, n=10)
?mutate
library(dplyr)
library(ggplot2)
class(stormdata$INJURIES)
class(stormdata$FATALITIES)
sum(stormdata$INJURIES)
sum(stormdata$FATALITIES)
mutate(injury_agg, x_perc = (x/sum(x)*100))
fatality_agg <-  mutate(fatality_agg, x_perc = (x/sum(x)*100))
head(fatality_agg,n=15)
head(injury_agg,n=15)
injury_agg <-  mutate(injury_agg, x_perc = (x/sum(x)*100))
head(injury_agg,n=15)
?overlap
intersect(head(injury_agg, n=15)$EventType, head(fatality_agg, n=15)$EventType)
sessionInfo
sessionInfo()
