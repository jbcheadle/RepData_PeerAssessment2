install.packages("dplyr")
library(dplyr)
library(plyr)
x <- c(1,2,3,5,6,7,7,889,220)
stuff <- ifelse(x>4,TRUE,FALSE)
stuff
table(x,stuff)
table(stuff,x>4)
x[stuff]
?cut
library(Hmisc)
yesno <- sample(c("yes","no"),size=10, replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)
library(reshape2)
head(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
mtcars$carname<-rownames(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
head(carMelt)
tail(carMelt)
cylData <- dcast(carMelt, cyl ~ variable)
?dcast
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean,std)
cylData <- dcast(carMelt, cyl ~ variable,mean,cos())
cylData <- dcast(carMelt, cyl ~ variable,mean,cos)
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
?split
library(data.table)
?split
library("crayon", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:crayon", unload=TRUE)
?ddply
?summarize
chicago <- readRDS("chicago.rds")
swirl()
library(swirl)
swirl(0)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000
)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
install.packages("curl")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
?summarize
summarize(by_package, mean(size))
?n
?n_distinct
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique()))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
chain1()
chain1
cran %>%
select(ip_id, country, package, size) %>%
print
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
?
c
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain2.R')
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain4.R')
submit()
library("dplyr", lib.loc="C:/Program Files/R/R-3.3.2/library")
library(swirl)
swirl(0)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
separate(0)
separate()
?separate
separate(res, sex_class, into = c("sex","class"))
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script1.R')
submit()
students3
?gather
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
refresh()
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
students3$class1:class6
students3$class1:class5
students3$class1
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
select(students3,class1:class5)
students3%>%select(class1:class5)
students3%>%select(class1:class5)%>%gather(class,grade,na.rm=TRUE)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
submit()
skip()
swirl()
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
?gather
?filter
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
skip()
?spread(0)
?spread
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
library(readr)
parse_number("class5")
?mutate
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
submit()
students4
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script5.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script6.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(passed, status="failed")
failed <- mutate(failed, status="failed")
bind_rows(passed,failed)
sat
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script8.R')
submit(0)
submit()
?group_by
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script9.R')
submit()
?heatmap.2
?heatmap
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(RColorBrewer)
?heatmap.2
knit_with_parameters('C:/Program Files/R/Coursera/Data Science R/RepData_PeerAssessment1/PA1_template.Rmd')
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!(file.exists("StormData.csv.bz2"))) {
download.file(url = fileURL, destfile = "./StormData.csv.bz2")
}
stormdata <- read.csv("StormData.csv.bz2")
setwd("C:/Program Files/R/Coursera/Data Science R/RepData_PeerAssessment2")
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!(file.exists("StormData.csv.bz2"))) {
download.file(url = fileURL, destfile = "./StormData.csv.bz2")
}
stormdata <- read.csv("StormData.csv.bz2")
dim(stormdata)
str(stormdata)
head(stormdata)
head(levels(stormdata$EVTYPE), n=10)
sum(levels(stormdata$EVTYPE))
length(levels(stormdata$EVTYPE))
head(levels(stormdata$EVTYPE))
head(levels(stormdata$EVTYPE), n = 15)
unique(stormdata$PROPDMGEXP)
levels(stormdata$PROPDMGEXP)
class(levels(stormdata$PROPDMGEXP))
charvec <- c(levels(stormdata$PROPDMGEXP), levels(stormdata$CROPDMGEXP))
charvect
charvec
unique(charvec)
unique(c(levels(stormdata$PROPDMGEXP), levels(stormdata$CROPDMGEXP)))
df <- data.frame(c(25.0, "k"),c(15.0,"m"))
df
names(df) <- c("PROPDMG", "PROPDMGEXP"
)
df
df <- data.frame(c(25.0, 15.5, 12.2),c("K","B","M"))
df
names(df) <- c("PROPDMG", "PROPDMGEXP")
library(dplyr)
?grepl
grepl("[Kk] | [Mm] | [Bb]",stormdata$CROPDMGEXP)
sum(grepl("[Kk] | [Mm] | [Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Kk]",stormdata$CROPDMGEXP))
sum(grepl("[Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Mm]",stormdata$CROPDMGEXP))
sum(grepl("[Mm]" | "[Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Mm] OR [Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Mm] | [Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Mm]|[Bb]",stormdata$CROPDMGEXP))
sum(grepl("[Kk]|[Mm]|[Bb]",stormdata$CROPDMGEXP))
cropdamage <- stormdata[grepl("[Kk]|[Mm]|[Bb]",stormdata$CROPDMGEXP),]
propertydamage <- stormdata[grepl("[Kk]|[Mm]|[Bb]",stormdata$PROPDMGEXP),]
?gsub
?chartr
library(gsubfn)
install.packages("gsubfn")
library(gsubfn)
?gsubfn
gsubfn(".",list("K"=1000,
"M"=1000000,))
gsubfn(".",list("K"=1000,
"M"=1000000
"B"=1000000000, df))
gsubfn(".",list("K"=1000,
"M"=1000000
"B"=1000000000), df)
gsubfn(".",list("K"=1000,
"M"=1000000,
"B"=1000000000), df)
gsubfn(".",list("K"="1000",
"M"="1000000",
"B"="1000000000"), df)
gsubfn(".",list("K"="1000",
"M"="1000000",
"B"="1000000000"), df$PROPDMGEXP)
class(df$PROPDMGEXP)
df$PROPDMGEXP <- as.character(levels(df$PROPDMGEXP))
class(df$PROPDMGEXP)
df$PROPDMG
df$PROPDMGEXP
gsubfn(".",list("K"="1000",
"M"="1000000",
"B"="1000000000"), df$PROPDMGEXP)
df$PROPDMGEXP
df$PROPDMGEXP <- gsubfn(".",list("K"="1000",
+                 "M"="1000000",
+                 "B"="1000000000"), df$PROPDMGEXP)
stormdata$PROPDMGEXP <- as.character(levels(stormdata$PROPDMGEXP))
stormdata$CROPDMGEXP <- as.character(stormdata$PROPDMGEXP)
stormdata <- read.csv("StormData.csv.bz2")
stormdata$PROPDMGEXP <- as.character(stormdata$PROPDMGEXP)
stormdata$CROPDMGEXP <- as.character(stormdata$CROPDMGEXP)
sapply(list(stormdata$CROPDMGEXP, stormdata$PROPDMGEXP), toupper)
stormdata$PROPDMGEXP <- as.character(stormdata$PROPDMGEXP)
stormdata$CROPDMGEXP <- as.character(stormdata$CROPDMGEXP)
cropdamage <- stormdata[grepl("[Kk]|[Mm]|[Bb]",stormdata$CROPDMGEXP),]
propertydamage <- stormdata[grepl("[Kk]|[Mm]|[Bb]",stormdata$PROPDMGEXP),]
cropdamage$CROPDMGEXP <- toupper(cropdamage$CROPDMGEXP)
cropdamage$CROPDMGEXP <- toupper(cropdamage$CROPDMGEXP)
propertydamage$PROPDMGEXP <- toupper(propertydamage$PROPDMGEXP)
unique(cropdamage$CROPDMGEXP)
unique(cropdamage$CROPDMGEXP)
unique(propertydamage$PROPDMGEXP)
gsubfn(".",list("K"=1000, "M"=1000000, "B" = 1000000000), x=cropdamage$CROPDMGEXP)
cropdamage$CROPDMGEXP <- gsub(pattern = "K",replacement = 1000,x=cropdamage$CROPDMGEXP)
cropdamage$CROPDMGEXP <- gsub(pattern = "K",replacement = 1000,x=cropdamage$CROPDMGEXP)
cropdamage$CROPDMGEXP <- gsub(pattern = "M",replacement = 1000000,x=cropdamage$CROPDMGEXP)
cropdamage$CROPDMGEXP <- gsub(pattern = "B",replacement = 1000000000,x=cropdamage$CROPDMGEXP)
propertydamage$PROPDMGEXP <- gsub(pattern = "K",replacement = 1000,x=propertydamage$PROPDMGEXP)
propertydamage$PROPDMGEXP <- gsub(pattern = "M",replacement = 1000000,x=propertydamage$PROPDMGEXP)
propertydamage$PROPDMGEXP <- gsub(pattern = "B",replacement = 1000000000,x=propertydamage$PROPDMGEXP)
cropdamage <- mutate(cropdamage, CROPDMG_MUT <- CROPDMG*as.numeric(CROPDMGEXP))
cropdamage <- mutate(cropdamage, CROPDMG_MUT = CROPDMG*as.numeric(CROPDMGEXP))
head(cropdamage$CROPDMG_MUT)
head(cropdamage)
propertydamage <- mutate(propertydamage, PROPDMG_MUT = PROPDMG*as.numeric(PROPDMGEXP))
head(cropdamage$CROPDMG_MUT)
head(propertydamage$PROPDMG_MUT)
cropdmg_agg <- aggregate(cropdamage$CROPDMG_MUT, by=list(EventType=cropdamage$EVTYPE),
FUN=sum, na.rm=TRUE)
propdmg_agg <- aggregate(propertydamage$PROPDMG_MUT, by=list(EventType=propertydamage$EVTYPE),
FUN=sum, na.rm=TRUE)
head(cropdmg_agg)
head(propdmg_agg)
cropdmg_agg <- cropdmg_agg[order(cropdmg_agg$x, decreasing=TRUE),]
propdmg_agg <- propdmg_agg[order(propdmg_agg$x, decreasing=TRUE),]
head(cropdmg_agg, head)
head(cropdmg_agg, n=15)
head(propdmg_agg, n=15)
dim(cropdmg_agg)
dim(propdmg_agg)
library(ggplot2)
?join
combined <- join(propdmg_agg, crop_dmg_agg, by = EventType)
library(dplyr)
combined <- left_join(propdmg_agg, crop_dmg_agg, by = EventType)
combined <- left_join(propdmg_agg, crop_dmg_agg, by = "EventType")
combined <- left_join(propdmg_agg, cropdmg_agg, by = "EventType")
head(combined)
combined <- full_join(propdmg_agg, cropdmg_agg, by = "EventType")
head(combined)
combined[is.na(combined)] <- 0
is.na(combined)
sum(is.na(combined))
head(combined)
names(combined) <- c("EventType", "PropertyDamage", "CropDamage")
head(combined)
combined <- mutate(combined, Totals=sum(PropertyDamage, EventType))
head(combined)
combined <- mutate_each(combined, Totals=sum(PropertyDamage, EventType))
combined <- mutate(combined, Totals=sum(PropertyDamage, CropDamage)
)
head(combined)
combined <- mutate_each(combined, Totals=sum(PropertyDamage, CropDamage))
combined <- mutate_each(tbl = combined, funs = sum(PropertyDamage, CropDamage))
combined <- mutate(combined, Totals= PropertyDamage + EventType)
combined <- mutate(combined, Totals= PropertyDamage + CropDamage)
head(combined)
combined <- combined[order(combined$Totals, decreasing=TRUE),]
head(combined, n=20)
qplot(combined)
combined_top <- head(combined,n=20)
qplot(x=EventType,y = Totals, data = combined_top)
qplot(x=EventType,y = Totals, data = combined_top) + geom_bar()
qplot(weight=Totals, data = combined_top) + geom_bar()
ggplot(combined_top, aes(Totals)) + geom_bar()
ggplot(combined_top, aes(x=EventType,y=Totals))
ggplot(combined_top, aes(x=EventType,y=Totals)) + geom_bar()
ggplot(combined_top, aes(x=EventType,weight=Totals)) + geom_bar()
ggplot(combined_top, aes(weight=Totals, fill=EventType)) + geom_bar()
ggplot(combined_top, aes(weight=Totals, x=EventType)) + geom_bar()
ggplot(combined_top, aes(weight=Totals, x=EventType, fill=cropdamage)) + geom_bar()
ggplot(combined_top, aes(weight=Totals, x=EventType, fill=c(CropDamage,PropDamage))) + geom_bar()
combined_top
ggplot(combined_top, aes(weight=Totals, x=EventType) + geom_bar()
)
ggplot(combined_top, aes(weight=Totals, x=EventType)) + geom_bar()
combined_top[,2:4]/1000000000
combined_top <- combined_top[,2:4]/1e9
combined_top
?ylab
library(reshape2)
combined_top
combined <- full_join(propdmg_agg, cropdmg_agg, by = "EventType")
combined[is.na(combined)] <- 0
names(combined) <- c("EventType", "PropertyDamage", "CropDamage")
head(combined)
combined.m <- melt(data = combined,id.vars = EventType)
combined$EventType
combined.m <- melt(combined)
head(combined.m)
dim(combined.m)
ggplot(combined.m, aes(x=EventType, y= value, fill=variable)) + geom_bar(stat="identity")
ggplot(combined.m, aes(x=EventType, y= value, fill=variable[-PropertyDamage])) + geom_bar(stat="identity")
ggplot(combined.m, aes(x=EventType, y= value, fill=variable[,-PropertyDamage])) + geom_bar(stat="identity")
combined <- mutate(combined, Totals=PropertyDamage + CropDamage)
combined <- combined[order(combined$Totals, decreasing=TRUE),]
combined_top <- head(combined,n=20)
combined_top[,2:4] <- combined_top[,2:4]/1e9
combined_top
combined_top[,-4]
combined.m <- melt(combined_top[,-4])
ggplot(combined.m, aes(x=EventType, y= value, fill=variable)) + geom_bar(stat="identity")
ggplot(combined.m, aes(reorder(EventType,value), y= value, fill=variable)) + geom_bar(stat="identity")
ggplot(combined.m, aes(reorder(EventType,-value), y= value, fill=variable)) + geom_bar(stat="identity")
ggplot(combined.m, aes(reorder(EventType,-value), y= value, fill=variable)) + geom_bar(stat="identity") + geom_flip()
ggplot(combined.m, aes(reorder(EventType,-value), y= value, fill=variable)) + geom_bar(stat="identity") + coord_flip()
ggplot(combined.m, aes(reorder(EventType,value), y= value, fill=variable)) + geom_bar(stat="identity") + coord_flip()
